
STM32F091RC-running_LEDs-v0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b8  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000374  08000374  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000374  08000374  00020484  2**0
                  CONTENTS
  4 .ARM          00000000  08000374  08000374  00020484  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000374  08000374  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000378  08000378  00010378  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  0800037c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000484  08000800  00020484  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004a4  08000800  000204a4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d73  00000000  00000000  000204ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004e9  00000000  00000000  0002121f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001a0  00000000  00000000  00021708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000158  00000000  00000000  000218a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001888c  00000000  00000000  00021a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e98  00000000  00000000  0003a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096a55  00000000  00000000  0003c124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2b79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000460  00000000  00000000  000d2bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000484 	.word	0x20000484
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800035c 	.word	0x0800035c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000488 	.word	0x20000488
 8000100:	0800035c 	.word	0x0800035c

08000104 <ClockConfig>:
							{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0},
							{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0}};


void ClockConfig()
{
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOAEN; // Enable clock for GPIOA
 8000108:	4b08      	ldr	r3, [pc, #32]	; (800012c <ClockConfig+0x28>)
 800010a:	695a      	ldr	r2, [r3, #20]
 800010c:	4b07      	ldr	r3, [pc, #28]	; (800012c <ClockConfig+0x28>)
 800010e:	2180      	movs	r1, #128	; 0x80
 8000110:	0289      	lsls	r1, r1, #10
 8000112:	430a      	orrs	r2, r1
 8000114:	615a      	str	r2, [r3, #20]
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN; // Enable clock for GPIOC
 8000116:	4b05      	ldr	r3, [pc, #20]	; (800012c <ClockConfig+0x28>)
 8000118:	695a      	ldr	r2, [r3, #20]
 800011a:	4b04      	ldr	r3, [pc, #16]	; (800012c <ClockConfig+0x28>)
 800011c:	2180      	movs	r1, #128	; 0x80
 800011e:	0309      	lsls	r1, r1, #12
 8000120:	430a      	orrs	r2, r1
 8000122:	615a      	str	r2, [r3, #20]

}
 8000124:	46c0      	nop			; (mov r8, r8)
 8000126:	46bd      	mov	sp, r7
 8000128:	bd80      	pop	{r7, pc}
 800012a:	46c0      	nop			; (mov r8, r8)
 800012c:	40021000 	.word	0x40021000

08000130 <PinConfig>:

void PinConfig()
{
 8000130:	b580      	push	{r7, lr}
 8000132:	af00      	add	r7, sp, #0
	GPIOA->MODER |= (1 << 8) | (1 << 10) | (1 << 12) | (1 << 14) | (1 << 16) | (1 << 18) | (1 << 20) | (1 << 22) | (1 << 24); // Set PA4 to PA12 as output
 8000134:	2390      	movs	r3, #144	; 0x90
 8000136:	05db      	lsls	r3, r3, #23
 8000138:	681a      	ldr	r2, [r3, #0]
 800013a:	2390      	movs	r3, #144	; 0x90
 800013c:	05db      	lsls	r3, r3, #23
 800013e:	4909      	ldr	r1, [pc, #36]	; (8000164 <PinConfig+0x34>)
 8000140:	430a      	orrs	r2, r1
 8000142:	601a      	str	r2, [r3, #0]

	GPIOC->MODER &= ~GPIO_MODER_MODER13; // Clear mode register for PC13
 8000144:	4b08      	ldr	r3, [pc, #32]	; (8000168 <PinConfig+0x38>)
 8000146:	681a      	ldr	r2, [r3, #0]
 8000148:	4b07      	ldr	r3, [pc, #28]	; (8000168 <PinConfig+0x38>)
 800014a:	4908      	ldr	r1, [pc, #32]	; (800016c <PinConfig+0x3c>)
 800014c:	400a      	ands	r2, r1
 800014e:	601a      	str	r2, [r3, #0]
	GPIOC->PUPDR &= ~GPIO_PUPDR_PUPDR13; // Clear pull-up/pull-down register PC13
 8000150:	4b05      	ldr	r3, [pc, #20]	; (8000168 <PinConfig+0x38>)
 8000152:	68da      	ldr	r2, [r3, #12]
 8000154:	4b04      	ldr	r3, [pc, #16]	; (8000168 <PinConfig+0x38>)
 8000156:	4905      	ldr	r1, [pc, #20]	; (800016c <PinConfig+0x3c>)
 8000158:	400a      	ands	r2, r1
 800015a:	60da      	str	r2, [r3, #12]
}
 800015c:	46c0      	nop			; (mov r8, r8)
 800015e:	46bd      	mov	sp, r7
 8000160:	bd80      	pop	{r7, pc}
 8000162:	46c0      	nop			; (mov r8, r8)
 8000164:	01555500 	.word	0x01555500
 8000168:	48000800 	.word	0x48000800
 800016c:	f3ffffff 	.word	0xf3ffffff

08000170 <Delay>:

void Delay(int delay)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < delay; i++) {
 8000178:	2300      	movs	r3, #0
 800017a:	60fb      	str	r3, [r7, #12]
 800017c:	e003      	b.n	8000186 <Delay+0x16>
      __NOP();
 800017e:	46c0      	nop			; (mov r8, r8)
    for (int i = 0; i < delay; i++) {
 8000180:	68fb      	ldr	r3, [r7, #12]
 8000182:	3301      	adds	r3, #1
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fa      	ldr	r2, [r7, #12]
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	429a      	cmp	r2, r3
 800018c:	dbf7      	blt.n	800017e <Delay+0xe>
    }
}
 800018e:	46c0      	nop			; (mov r8, r8)
 8000190:	46c0      	nop			; (mov r8, r8)
 8000192:	46bd      	mov	sp, r7
 8000194:	b004      	add	sp, #16
 8000196:	bd80      	pop	{r7, pc}

08000198 <MemoryWritePortA>:


void MemoryWritePortA(int two_bytes[16])
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b084      	sub	sp, #16
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]

	for (int i = 0; i<16; i++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	60fb      	str	r3, [r7, #12]
 80001a4:	e016      	b.n	80001d4 <MemoryWritePortA+0x3c>
	{
		if(two_bytes[i] == 1)
 80001a6:	68fb      	ldr	r3, [r7, #12]
 80001a8:	009b      	lsls	r3, r3, #2
 80001aa:	687a      	ldr	r2, [r7, #4]
 80001ac:	18d3      	adds	r3, r2, r3
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2b01      	cmp	r3, #1
 80001b2:	d106      	bne.n	80001c2 <MemoryWritePortA+0x2a>
		{
			GPIOA->BSRR = (1 << i);
 80001b4:	2201      	movs	r2, #1
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	409a      	lsls	r2, r3
 80001ba:	2390      	movs	r3, #144	; 0x90
 80001bc:	05db      	lsls	r3, r3, #23
 80001be:	619a      	str	r2, [r3, #24]
 80001c0:	e005      	b.n	80001ce <MemoryWritePortA+0x36>
		}
		else
		{
			GPIOA->BRR = (1 << i);
 80001c2:	2201      	movs	r2, #1
 80001c4:	68fb      	ldr	r3, [r7, #12]
 80001c6:	409a      	lsls	r2, r3
 80001c8:	2390      	movs	r3, #144	; 0x90
 80001ca:	05db      	lsls	r3, r3, #23
 80001cc:	629a      	str	r2, [r3, #40]	; 0x28
	for (int i = 0; i<16; i++)
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	3301      	adds	r3, #1
 80001d2:	60fb      	str	r3, [r7, #12]
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	2b0f      	cmp	r3, #15
 80001d8:	dde5      	ble.n	80001a6 <MemoryWritePortA+0xe>
		}
	}

}
 80001da:	46c0      	nop			; (mov r8, r8)
 80001dc:	46c0      	nop			; (mov r8, r8)
 80001de:	46bd      	mov	sp, r7
 80001e0:	b004      	add	sp, #16
 80001e2:	bd80      	pop	{r7, pc}

080001e4 <main>:

int main(void) {
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0

ClockConfig();
 80001ea:	f7ff ff8b 	bl	8000104 <ClockConfig>
PinConfig();
 80001ee:	f7ff ff9f 	bl	8000130 <PinConfig>
int position = 0;
 80001f2:	2300      	movs	r3, #0
 80001f4:	607b      	str	r3, [r7, #4]


  while (1)
  {

  	if (GPIOC->IDR & GPIO_IDR_13)
 80001f6:	4b18      	ldr	r3, [pc, #96]	; (8000258 <main+0x74>)
 80001f8:	691a      	ldr	r2, [r3, #16]
 80001fa:	2380      	movs	r3, #128	; 0x80
 80001fc:	019b      	lsls	r3, r3, #6
 80001fe:	4013      	ands	r3, r2
 8000200:	d014      	beq.n	800022c <main+0x48>
  	{
  		if (position < 18)
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	2b11      	cmp	r3, #17
 8000206:	dc0e      	bgt.n	8000226 <main+0x42>
  		{
  			MemoryWritePortA(led_position[position]);
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	019a      	lsls	r2, r3, #6
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <main+0x78>)
 800020e:	18d3      	adds	r3, r2, r3
 8000210:	0018      	movs	r0, r3
 8000212:	f7ff ffc1 	bl	8000198 <MemoryWritePortA>
  			Delay(50000);
 8000216:	4b12      	ldr	r3, [pc, #72]	; (8000260 <main+0x7c>)
 8000218:	0018      	movs	r0, r3
 800021a:	f7ff ffa9 	bl	8000170 <Delay>
  			position++;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	3301      	adds	r3, #1
 8000222:	607b      	str	r3, [r7, #4]
 8000224:	e7e7      	b.n	80001f6 <main+0x12>
  		}
  		else
  		{
  			position = 0;
 8000226:	2300      	movs	r3, #0
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	e7e4      	b.n	80001f6 <main+0x12>
  		}
  	}
  	else
  	{
  		if (position > 0)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	2b00      	cmp	r3, #0
 8000230:	dd0e      	ble.n	8000250 <main+0x6c>
  		{
  			MemoryWritePortA(led_position[position]);
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	019a      	lsls	r2, r3, #6
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x78>)
 8000238:	18d3      	adds	r3, r2, r3
 800023a:	0018      	movs	r0, r3
 800023c:	f7ff ffac 	bl	8000198 <MemoryWritePortA>
  			Delay(50000);
 8000240:	4b07      	ldr	r3, [pc, #28]	; (8000260 <main+0x7c>)
 8000242:	0018      	movs	r0, r3
 8000244:	f7ff ff94 	bl	8000170 <Delay>
  			position--;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	3b01      	subs	r3, #1
 800024c:	607b      	str	r3, [r7, #4]
 800024e:	e7d2      	b.n	80001f6 <main+0x12>
  		}
  		else
  		{
  			position = 17;
 8000250:	2311      	movs	r3, #17
 8000252:	607b      	str	r3, [r7, #4]
  	if (GPIOC->IDR & GPIO_IDR_13)
 8000254:	e7cf      	b.n	80001f6 <main+0x12>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	48000800 	.word	0x48000800
 800025c:	20000000 	.word	0x20000000
 8000260:	0000c350 	.word	0x0000c350

08000264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000268:	e7fe      	b.n	8000268 <NMI_Handler+0x4>

0800026a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800026a:	b580      	push	{r7, lr}
 800026c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800026e:	e7fe      	b.n	800026e <HardFault_Handler+0x4>

08000270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000274:	46c0      	nop			; (mov r8, r8)
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}

0800027a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800027a:	b580      	push	{r7, lr}
 800027c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}

08000284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000288:	f000 f832 	bl	80002f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000292:	b580      	push	{r7, lr}
 8000294:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000296:	46c0      	nop			; (mov r8, r8)
 8000298:	46bd      	mov	sp, r7
 800029a:	bd80      	pop	{r7, pc}

0800029c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800029c:	480d      	ldr	r0, [pc, #52]	; (80002d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800029e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002a0:	480d      	ldr	r0, [pc, #52]	; (80002d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002a2:	490e      	ldr	r1, [pc, #56]	; (80002dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <LoopForever+0xe>)
  movs r3, #0
 80002a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a8:	e002      	b.n	80002b0 <LoopCopyDataInit>

080002aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002ae:	3304      	adds	r3, #4

080002b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002b4:	d3f9      	bcc.n	80002aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002b6:	4a0b      	ldr	r2, [pc, #44]	; (80002e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b8:	4c0b      	ldr	r4, [pc, #44]	; (80002e8 <LoopForever+0x16>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002bc:	e001      	b.n	80002c2 <LoopFillZerobss>

080002be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002c0:	3204      	adds	r2, #4

080002c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002c4:	d3fb      	bcc.n	80002be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002c6:	f7ff ffe4 	bl	8000292 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80002ca:	f000 f823 	bl	8000314 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ce:	f7ff ff89 	bl	80001e4 <main>

080002d2 <LoopForever>:

LoopForever:
    b LoopForever
 80002d2:	e7fe      	b.n	80002d2 <LoopForever>
  ldr   r0, =_estack
 80002d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80002d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002dc:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 80002e0:	0800037c 	.word	0x0800037c
  ldr r2, =_sbss
 80002e4:	20000484 	.word	0x20000484
  ldr r4, =_ebss
 80002e8:	200004a4 	.word	0x200004a4

080002ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ec:	e7fe      	b.n	80002ec <ADC1_COMP_IRQHandler>
	...

080002f0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002f4:	4b05      	ldr	r3, [pc, #20]	; (800030c <HAL_IncTick+0x1c>)
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	001a      	movs	r2, r3
 80002fa:	4b05      	ldr	r3, [pc, #20]	; (8000310 <HAL_IncTick+0x20>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	18d2      	adds	r2, r2, r3
 8000300:	4b03      	ldr	r3, [pc, #12]	; (8000310 <HAL_IncTick+0x20>)
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	46c0      	nop			; (mov r8, r8)
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
 800030a:	46c0      	nop			; (mov r8, r8)
 800030c:	20000480 	.word	0x20000480
 8000310:	200004a0 	.word	0x200004a0

08000314 <__libc_init_array>:
 8000314:	b570      	push	{r4, r5, r6, lr}
 8000316:	2600      	movs	r6, #0
 8000318:	4d0c      	ldr	r5, [pc, #48]	; (800034c <__libc_init_array+0x38>)
 800031a:	4c0d      	ldr	r4, [pc, #52]	; (8000350 <__libc_init_array+0x3c>)
 800031c:	1b64      	subs	r4, r4, r5
 800031e:	10a4      	asrs	r4, r4, #2
 8000320:	42a6      	cmp	r6, r4
 8000322:	d109      	bne.n	8000338 <__libc_init_array+0x24>
 8000324:	2600      	movs	r6, #0
 8000326:	f000 f819 	bl	800035c <_init>
 800032a:	4d0a      	ldr	r5, [pc, #40]	; (8000354 <__libc_init_array+0x40>)
 800032c:	4c0a      	ldr	r4, [pc, #40]	; (8000358 <__libc_init_array+0x44>)
 800032e:	1b64      	subs	r4, r4, r5
 8000330:	10a4      	asrs	r4, r4, #2
 8000332:	42a6      	cmp	r6, r4
 8000334:	d105      	bne.n	8000342 <__libc_init_array+0x2e>
 8000336:	bd70      	pop	{r4, r5, r6, pc}
 8000338:	00b3      	lsls	r3, r6, #2
 800033a:	58eb      	ldr	r3, [r5, r3]
 800033c:	4798      	blx	r3
 800033e:	3601      	adds	r6, #1
 8000340:	e7ee      	b.n	8000320 <__libc_init_array+0xc>
 8000342:	00b3      	lsls	r3, r6, #2
 8000344:	58eb      	ldr	r3, [r5, r3]
 8000346:	4798      	blx	r3
 8000348:	3601      	adds	r6, #1
 800034a:	e7f2      	b.n	8000332 <__libc_init_array+0x1e>
 800034c:	08000374 	.word	0x08000374
 8000350:	08000374 	.word	0x08000374
 8000354:	08000374 	.word	0x08000374
 8000358:	08000378 	.word	0x08000378

0800035c <_init>:
 800035c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035e:	46c0      	nop			; (mov r8, r8)
 8000360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000362:	bc08      	pop	{r3}
 8000364:	469e      	mov	lr, r3
 8000366:	4770      	bx	lr

08000368 <_fini>:
 8000368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036e:	bc08      	pop	{r3}
 8000370:	469e      	mov	lr, r3
 8000372:	4770      	bx	lr
